<?xml version="1.0" encoding="UTF-8"?>
<skill id="react_skill">
  <name>React Component Generator</name>
  <description>A skill for generating React components using atomic design principles</description>
  <workflows>
    <workflow id="generate_component">
      <steps>
        <step id="analyze_requirements">
          <prompt>Analyze the component requirements and determine the atomic design level (atom, molecule, organism). Consider:
1. Component complexity and composition
2. Required props and state
3. UI/UX patterns
4. Tailwind styling approach

Component request: ${request}

Provide your analysis and recommendations for implementation.
Generate the component analysis in a markdown file.</prompt>
          <tools>
            <tool ref="fs_write_file" />
          </tools>
        </step>
        <step id="generate_component">
          <prompt>Based on the analysis, create the React component following these guidelines:
1. Use TypeScript for type safety
2. Implement modern React patterns and hooks
3. Apply Tailwind CSS for styling
4. Follow atomic design principles
5. Include proper documentation and examples
6. Consider accessibility (ARIA attributes, keyboard navigation)

Previous analysis: ${analyze_requirements.response}

Generate the component code.</prompt>
          <tools>
            <tool ref="fs_write_file" />
          </tools>
        </step>
        <step id="analyze_storybook_story">
          <prompt>Provide an analysis for a Storybook story for the component that:
1. Demonstrates different states and variations
2. Shows prop combinations
3. Includes documentation
4. Provides usage examples

Component implementation: ${generate_component.response}
</prompt>
      
        </step>
        <step id="generate_storybook_story">
          <prompt>Based on the analysis, create a Storybook story for the component. Follow these guidelines:
1. Use TypeScript for type safety
2. Implement modern React patterns and hooks
3. Apply Tailwind CSS for styling
4. Follow atomic design principles
5. Include proper documentation and examples
6. Consider accessibility (ARIA attributes, keyboard navigation)

Previous analysis: ${analyze_storybook_story.response}

Generate the Storybook story code using the file_writer tool.</prompt>
          <tools>
            <tool ref="fs_file_write" />
          </tools>
        </step>
      </steps>
    </workflow>
  </workflows>
</skill>
